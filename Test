# No Reg Backup

# Function to remove WSUS-related registry values
Function Remove-WUServerRegistryValue {
    param (
        [string]$RegistryKey
    )

    try {
        Write-Host "Searching in registry key: $RegistryKey"

        if (-not (Test-Path -Path $RegistryKey)) {
            Write-Host "Registry key does not exist: $RegistryKey"
            return
        }

        # Remove or update registry values related to WSUS
        Remove-RegistryValue -RegistryKey $RegistryKey -ValueName 'WUServer' -CounterVar 'global:WUServerCount'
        Remove-RegistryValue -RegistryKey $RegistryKey -ValueName 'WUStatusServer' -CounterVar 'global:WUStatusServerCount'
        Set-RegistryValue -RegistryKey $RegistryKey -ValueName 'UseWUServer' -Value 0 -CounterVar 'global:UseWUServerCount'
        Set-RegistryValue -RegistryKey $RegistryKey -ValueName 'NoAutoUpdate' -Value 0

    } catch {
        Write-Host "Error in Remove-WUServerRegistryValue function for registry key [$RegistryKey]: $_"
    }
}

# Helper function to remove a registry value and update a counter
Function Remove-RegistryValue {
    param (
        [string]$RegistryKey,
        [string]$ValueName,
        [string]$CounterVar
    )

    try {
        if (Get-ItemProperty -Path $RegistryKey -Name $ValueName -ErrorAction SilentlyContinue) {
            Remove-ItemProperty -Path $RegistryKey -Name $ValueName -Force
            Set-Variable -Name $CounterVar -Value ($(Get-Variable -Name $CounterVar).Value + 1) -Scope Global
            Write-Host "Removed registry value [$ValueName] from key [$RegistryKey]. Count [$($global:$CounterVar)]"
        } else {
            Write-Host "Registry value [$ValueName] not found in key [$RegistryKey]."
        }
    } catch {
        Write-Host "Error removing registry value [$ValueName] from key [$RegistryKey]: $_"
    }
}

# Helper function to set a registry value
Function Set-RegistryValue {
    param (
        [string]$RegistryKey,
        [string]$ValueName,
        [object]$Value,
        [string]$CounterVar = $null
    )

    try {
        if (Get-ItemProperty -Path $RegistryKey -Name $ValueName -ErrorAction SilentlyContinue) {
            Set-ItemProperty -Path $RegistryKey -Name $ValueName -Value $Value
            if ($CounterVar) {
                Set-Variable -Name $CounterVar -Value ($(Get-Variable -Name $CounterVar).Value + 1) -Scope Global
            }
            Write-Host "Set registry value [$ValueName] to [$Value] in key [$RegistryKey]."
        } else {
            Write-Host "Registry value [$ValueName] not found in key [$RegistryKey], unable to set."
        }
    } catch {
        Write-Host "Error setting registry value [$ValueName] in key [$RegistryKey]: $_"
    }
}

# Main Program

# Define root registry keys
$rootRegistryKeys = @(
    "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate",
    "HKLM:\SOFTWARE\MICROSOFT\WindowsUpdate",
    "HKLM:\SOFTWARE\WOW6432Node\Policies\Microsoft\Windows\WindowsUpdate"
)

# Initialize counters
[int32]$global:WUServerCount = 0
[int32]$global:WUStatusServerCount = 0
[int32]$global:UseWUServerCount = 0

# Remove WSUS settings from registry keys
foreach ($key in $rootRegistryKeys) {
    Remove-WUServerRegistryValue -RegistryKey $key
}

# Update specific registry values
$valuesToUpdate = @(
    @{ Key = $rootRegistryKeys[0]; Name = "DisableWindowsUpdateAccess"; Value = "0" },
    @{ Key = $rootRegistryKeys[0]; Name = "DeferFeatureUpdates"; Value = "0" },
    @{ Key = $rootRegistryKeys[0]; Name = "DeferQualityUpdates"; Value = "0" },
    @{ Key = $rootRegistryKeys[0]; Name = "DoNotConnectToWindowsUpdateInternetLocations"; Value = "0" }
)

foreach ($item in $valuesToUpdate) {
    Set-RegistryValue -RegistryKey $item.Key -ValueName $item.Name -Value $item.Value
}

# Delete specific registry values
$valuesToDelete = @(
    @{ Key = $rootRegistryKeys[0]; Name = "SetPolicyDrivenUpdateSourceForDriverUpdates" },
    @{ Key = $rootRegistryKeys[0]; Name = "SetPolicyDrivenUpdateSourceForFeatureUpdates" },
    @{ Key = $rootRegistryKeys[0]; Name = "SetPolicyDrivenUpdateSourceForOtherUpdates" },
    @{ Key = $rootRegistryKeys[0]; Name = "SetPolicyDrivenUpdateSourceForQualityUpdates" }
)

foreach ($item in $valuesToDelete) {
    Remove-RegistryValue -RegistryKey $item.Key -ValueName $item.Name
}
